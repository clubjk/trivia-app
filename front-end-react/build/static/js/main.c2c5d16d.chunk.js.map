{"version":3,"sources":["config.js","App.js","index.js"],"names":["module","exports","WebsocketEndpoint","TRIVIA_STEP","STEP_GETSTARTED","value","STEP_JOINGAME","STEP_WAITING","STEP_QUESTIONS","STEP_GAMEOVER","GetStarted","props","currentStep","Card","Body","Title","Text","Button","variant","onClick","onNewGame","JoinGame","onJoinGame","Waiting","invitelink","URL","gameId","document","baseURI","href","inviteBody","Form","Control","type","readOnly","onStartGame","Spinner","animation","Questions","useState","activeButton","setActiveButton","questionBody","question","Col","lg","className","options","map","option","i","myKey","id","key","onAnswer","answerClick","size","block","Players","playerList","ListGroup","filter","player","currentPlayer","Item","style","color","playerName","Badge","pill","score","connectionId","GameOver","Jumbotron","location","App","ws","WebSocket","state","hash","startsWith","connected","replace","message","JSON","stringify","this","send","setState","questionId","answer","onopen","onmessage","evt","parse","data","action","players","splice","onclose","Container","Row","newGame","joinGame","startGame","xs","isPlaying","duration","colors","remainingTime","React","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c2c5d16d.chunk.js","sourcesContent":["module.exports = {\n  WebsocketEndpoint: 'wss://jafr4tmzjl.execute-api.us-east-2.amazonaws.com/Prod'\n};\n","import React, { useState } from 'react';\nimport { Row, Col, Card, Button, Container, Form, ListGroup, Badge, Spinner, Jumbotron} from 'react-bootstrap';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\nimport { WebsocketEndpoint } from './config'\n\nvar TRIVIA_STEP = {\n  STEP_GETSTARTED : {value: 0},\n  STEP_JOINGAME: {value: 1},\n  STEP_WAITING : {value: 2},\n  STEP_QUESTIONS : {value: 3},\n  STEP_GAMEOVER : {value: 4},\n};\n\nfunction GetStarted(props) {\n  if (props.currentStep !== TRIVIA_STEP.STEP_GETSTARTED) {\n    return null\n  }\n\n  return (<Card>\n    <Card.Body>\n      <Card.Title>Get Started</Card.Title>\n      <Card.Text>\n        Click the button below to start a new game.\n      </Card.Text>\n      <Button variant=\"primary\" onClick={props.onNewGame}>Create a New Game</Button>\n    </Card.Body>\n  </Card>);\n}\n\nfunction JoinGame(props) {\n  if (props.currentStep !== TRIVIA_STEP.STEP_JOINGAME) {\n    return null\n  }\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Join Game</Card.Title>\n        <Card.Text>\n          You've been invited to join a game!\n        </Card.Text>\n        <Button variant=\"primary\" onClick={props.onJoinGame}>Join</Button>\n      </Card.Body>\n    </Card>\n  );\n}\n\nfunction Waiting(props) {\n  if (props.currentStep !== TRIVIA_STEP.STEP_WAITING) {\n    return null\n  }\n  const invitelink = new URL(`#newgame/${props.gameId}`, document.baseURI).href;\n  const inviteBody = (props.gameId) ? (\n    <Card.Text>\n      Share the link below with players joining the game\n      <Form.Control type=\"text\" value={invitelink} readOnly />\n      <Button variant=\"primary\" onClick={props.onStartGame}>Start Game</Button>\n    </Card.Text>\n    ) : (\n      <Spinner animation=\"grow\" variant=\"secondary\" />\n  );\n\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Waiting for players</Card.Title>\n        {inviteBody}\n      </Card.Body>\n    </Card>\n  );\n}\n\nfunction Questions(props) {\n  const [activeButton, setActiveButton] = useState(null);\n\n  const answerClick = (key, id, option) => {\n    props.onAnswer(id, option);\n    setActiveButton(key);\n  }\n\n  if (props.currentStep !== TRIVIA_STEP.STEP_QUESTIONS) {\n    return null\n  }\n\n  var questionBody = !props.question ? (\n    <Spinner animation=\"grow\" variant=\"secondary\" />\n  ) : (\n    <Col lg=\"8\">\n      <b>{props.question.question}</b>\n      <div className=\"d-grid gap-2\">\n      {props.question.options.map((option, i) => {\n        const myKey = props.question.id + \"-\" + i;\n        return (\n          <Button\n           key={myKey}\n           variant={activeButton===myKey ? \"success\" : \"secondary\"}\n           onClick={() => answerClick(myKey, props.question.id, option)}\n           size=\"lg\" block>\n            {option}\n          </Button>\n        )\n      })}\n      </div>\n    </Col>\n  );\n\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Let's Play!</Card.Title>\n          {questionBody}\n      </Card.Body>\n    </Card>\n  );\n}\n\nfunction Players(props) {\n  if (!props.playerList) {\n    return null;\n  }\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Players</Card.Title>\n\n        <ListGroup>\n        {props.playerList && props.playerList.filter((player)=>player.currentPlayer).map((player, i) => {\n            return (<ListGroup.Item key={player.connectionId} variant=\"primary\" className=\"d-flex justify-content-between align-items-center\">\n              <span style={{color:player.playerName}}>&#11044; <span className=\"small\" style={{color:\"Black\"}}>{player.playerName}</span></span>\n              <Badge pill variant=\"dark\">{player.score}</Badge>\n            </ListGroup.Item>)\n         })}\n         </ListGroup>\n         <p></p>\n         <ListGroup>\n        {props.playerList ? props.playerList.filter((player)=>!player.currentPlayer).map((player, i) => {\n            return (<ListGroup.Item key={player.connectionId} className=\"d-flex justify-content-between align-items-center\">\n              <span style={{color:player.playerName}}>&#11044; <span className=\"small\" style={{color:\"Black\"}}>{player.playerName}</span></span>\n              <Badge pill variant=\"dark\">{player.score}</Badge>\n            </ListGroup.Item>)\n         }) : <div>no players</div>}\n\n        </ListGroup>\n      </Card.Body>\n    </Card>\n  );\n}\n\nfunction GameOver(props) {\n  if (props.currentStep !== TRIVIA_STEP.STEP_GAMEOVER) {\n    return null\n  }\n  const restart = () => {\n    document.location = document.baseURI;\n  };\n\n  return (\n    <Jumbotron>\n    <h1>Game Completed!</h1>\n    <p>\n    </p>\n    <p>\n      <Button variant=\"primary\" onClick={()=>restart()}>Restart</Button>\n    </p>\n  </Jumbotron>\n  );\n}\n\nclass App extends React.Component {\n  ws = new WebSocket(WebsocketEndpoint);\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentStep: document.location.hash.startsWith('#newgame') ? TRIVIA_STEP.STEP_JOINGAME : TRIVIA_STEP.STEP_GETSTARTED,\n      connected: false,\n      playerList: null,\n      gameId: document.location.hash.startsWith('#newgame') ? document.location.hash.replace('#newgame/', '') :  null,\n      question: null\n    };\n  }\n\n  newGame() {\n    var message = JSON.stringify({\"action\":\"newgame\"});\n    this.ws.send(message);\n    this.setState({currentStep: TRIVIA_STEP.STEP_WAITING});\n  }\n\n  joinGame() {\n    var message = JSON.stringify({\"action\":\"joingame\", \"gameid\": this.state.gameId});\n    this.ws.send(message);\n    this.setState({currentStep: TRIVIA_STEP.STEP_QUESTIONS});\n  }\n\n  startGame() {\n    var message = JSON.stringify({\"action\":\"startgame\", \"gameid\": this.state.gameId});\n    this.ws.send(message);\n    this.setState({currentStep: TRIVIA_STEP.STEP_QUESTIONS});\n  }\n\n  answer(questionId, answer) {\n    var message = JSON.stringify({\n      \"action\":\"answer\",\n      \"gameid\": this.state.gameId,\n      \"questionid\": questionId,\n      \"answer\": answer\n    });\n    this.ws.send(message);\n  }\n\n  componentDidMount() {\n      this.ws.onopen = () => {\n        this.setState({connected: true});\n      }\n\n      this.ws.onmessage = evt => {\n        const message = JSON.parse(evt.data)\n\n        switch(message.action) {\n          case \"gamecreated\":\n            this.setState({gameId: message.gameId});\n            break;\n          case \"playerlist\":\n            this.setState({playerList: message.players.splice(0)});\n            break;\n          case \"question\":\n            this.setState({question: message.question})\n            break;\n          case \"gameover\":\n            this.setState({currentStep: TRIVIA_STEP.STEP_GAMEOVER});\n            break;\n          default:\n            break;\n        }\n      }\n\n      this.ws.onclose = () => {\n        this.setState({connected: false});\n      }\n\n  }\n\n\n  render() {\n    return (\n      <Container className=\"p-3\">\n      <Row>\n      <Col>\n        <GetStarted currentStep={this.state.currentStep} onNewGame={() => this.newGame()} />\n        <JoinGame currentStep={this.state.currentStep} onJoinGame={() => this.joinGame()} gameId={this.state.gameId} />\n        <Waiting currentStep={this.state.currentStep} onStartGame={() => this.startGame()} gameId={this.state.gameId} />\n        <Questions currentStep={this.state.currentStep} onAnswer={(questionId, answer) => this.answer(questionId, answer)} question={this.state.question}  />\n        <GameOver currentStep={this.state.currentStep} />\n        {this.state.connected ? <small>&#129001; connected</small> :  <small>&#128997; disconnected</small>}\n      </Col>\n      <Col xs={3}>\n        <Players playerList={this.state.playerList}/>\n        <br/>\n        <div className=\"d-flex justify-content-center\">\n        {this.state.question && <CountdownCircleTimer\n          key={this.state.question.id}\n          size={120}\n          isPlaying\n          duration={5}\n          colors={[[\"#007bff\"]]}\n        >\n          {({ remainingTime }) => remainingTime}\n        </CountdownCircleTimer>}\n        </div>\n      </Col>\n\n      </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}