{"ast":null,"code":"var _jsxFileName = \"/Users/john/devops/trivia-app/front-end-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Row, Col, Card, Button, Container, Form, ListGroup, Badge, Spinner, Jumbotron } from 'react-bootstrap';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport { WebsocketEndpoint } from './config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar TRIVIA_STEP = {\n  STEP_GETSTARTED: {\n    value: 0\n  },\n  STEP_JOINGAME: {\n    value: 1\n  },\n  STEP_WAITING: {\n    value: 2\n  },\n  STEP_QUESTIONS: {\n    value: 3\n  },\n  STEP_GAMEOVER: {\n    value: 4\n  }\n};\n\nfunction GetStarted(props) {\n  if (props.currentStep !== TRIVIA_STEP.STEP_GETSTARTED) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"Get Started\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        children: \"Click the button below to start a new game.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: props.onNewGame,\n        children: \"Create a New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 11\n  }, this);\n}\n\n_c = GetStarted;\n\nfunction JoinGame(props) {\n  if (props.currentStep !== TRIVIA_STEP.STEP_JOINGAME) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"Join Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        children: \"You've been invited to join a game!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: props.onJoinGame,\n        children: \"Join\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = JoinGame;\n\nfunction Waiting(props) {\n  if (props.currentStep !== TRIVIA_STEP.STEP_WAITING) {\n    return null;\n  }\n\n  const invitelink = new URL(`#newgame/${props.gameId}`, document.baseURI).href;\n  const inviteBody = props.gameId ? /*#__PURE__*/_jsxDEV(Card.Text, {\n    children: [\"Share the link below with players joining the game\", /*#__PURE__*/_jsxDEV(Form.Control, {\n      type: \"text\",\n      value: invitelink,\n      readOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      onClick: props.onStartGame,\n      children: \"Start Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Spinner, {\n    animation: \"grow\",\n    variant: \"secondary\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 7\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"Waiting for players\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), inviteBody]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = Waiting;\n\nfunction Questions(props) {\n  _s();\n\n  const [activeButton, setActiveButton] = useState(null);\n\n  const answerClick = (key, id, option) => {\n    props.onAnswer(id, option);\n    setActiveButton(key);\n  };\n\n  if (props.currentStep !== TRIVIA_STEP.STEP_QUESTIONS) {\n    return null;\n  }\n\n  var questionBody = !props.question ? /*#__PURE__*/_jsxDEV(Spinner, {\n    animation: \"grow\",\n    variant: \"secondary\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Col, {\n    lg: \"8\",\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      children: props.question.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-grid gap-2\",\n      children: props.question.options.map((option, i) => {\n        const myKey = props.question.id + \"-\" + i;\n        return /*#__PURE__*/_jsxDEV(Button, {\n          variant: activeButton === myKey ? \"success\" : \"secondary\",\n          onClick: () => answerClick(myKey, props.question.id, option),\n          size: \"lg\",\n          block: true,\n          children: option\n        }, myKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"Let's Play!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), questionBody]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Questions, \"2IlxFF4hDMq20XkKpqpiCEEIzsY=\");\n\n_c4 = Questions;\n\nfunction Players(props) {\n  if (!props.playerList) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"Players\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n        children: props.playerList && props.playerList.filter(player => player.currentPlayer).map((player, i) => {\n          return /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            variant: \"primary\",\n            className: \"d-flex justify-content-between align-items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: player.playerName\n              },\n              children: [\"\\u2B24 \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"small\",\n                style: {\n                  color: \"Black\"\n                },\n                children: player.playerName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 64\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Badge, {\n              pill: true,\n              variant: \"dark\",\n              children: player.score\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this)]\n          }, player.connectionId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n        children: props.playerList ? props.playerList.filter(player => !player.currentPlayer).map((player, i) => {\n          return /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            className: \"d-flex justify-content-between align-items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: player.playerName\n              },\n              children: [\"\\u2B24 \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"small\",\n                style: {\n                  color: \"Black\"\n                },\n                children: player.playerName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 64\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Badge, {\n              pill: true,\n              variant: \"dark\",\n              children: player.score\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this)]\n          }, player.connectionId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 21\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"no players\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n\n_c5 = Players;\n\nfunction GameOver(props) {\n  if (props.currentStep !== TRIVIA_STEP.STEP_GAMEOVER) {\n    return null;\n  }\n\n  const restart = () => {\n    document.location = document.baseURI;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Jumbotron, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Game Completed!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: () => restart(),\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n}\n\n_c6 = GameOver;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ws = new WebSocket(WebsocketEndpoint);\n    this.state = {\n      currentStep: document.location.hash.startsWith('#newgame') ? TRIVIA_STEP.STEP_JOINGAME : TRIVIA_STEP.STEP_GETSTARTED,\n      connected: false,\n      playerList: null,\n      gameId: document.location.hash.startsWith('#newgame') ? document.location.hash.replace('#newgame/', '') : null,\n      question: null\n    };\n  }\n\n  newGame() {\n    var message = JSON.stringify({\n      \"action\": \"newgame\"\n    });\n    this.ws.send(message);\n    this.setState({\n      currentStep: TRIVIA_STEP.STEP_WAITING\n    });\n  }\n\n  joinGame() {\n    var message = JSON.stringify({\n      \"action\": \"joingame\",\n      \"gameid\": this.state.gameId\n    });\n    this.ws.send(message);\n    this.setState({\n      currentStep: TRIVIA_STEP.STEP_QUESTIONS\n    });\n  }\n\n  startGame() {\n    var message = JSON.stringify({\n      \"action\": \"startgame\",\n      \"gameid\": this.state.gameId\n    });\n    this.ws.send(message);\n    this.setState({\n      currentStep: TRIVIA_STEP.STEP_QUESTIONS\n    });\n  }\n\n  answer(questionId, answer) {\n    var message = JSON.stringify({\n      \"action\": \"answer\",\n      \"gameid\": this.state.gameId,\n      \"questionid\": questionId,\n      \"answer\": answer\n    });\n    this.ws.send(message);\n  }\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      this.setState({\n        connected: true\n      });\n    };\n\n    this.ws.onmessage = evt => {\n      const message = JSON.parse(evt.data);\n\n      switch (message.action) {\n        case \"gamecreated\":\n          this.setState({\n            gameId: message.gameId\n          });\n          break;\n\n        case \"playerlist\":\n          this.setState({\n            playerList: message.players.splice(0)\n          });\n          break;\n\n        case \"question\":\n          this.setState({\n            question: message.question\n          });\n          break;\n\n        case \"gameover\":\n          this.setState({\n            currentStep: TRIVIA_STEP.STEP_GAMEOVER\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.ws.onclose = () => {\n      this.setState({\n        connected: false\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      className: \"p-3\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(GetStarted, {\n            currentStep: this.state.currentStep,\n            onNewGame: () => this.newGame()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(JoinGame, {\n            currentStep: this.state.currentStep,\n            onJoinGame: () => this.joinGame(),\n            gameId: this.state.gameId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Waiting, {\n            currentStep: this.state.currentStep,\n            onStartGame: () => this.startGame(),\n            gameId: this.state.gameId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Questions, {\n            currentStep: this.state.currentStep,\n            onAnswer: (questionId, answer) => this.answer(questionId, answer),\n            question: this.state.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(GameOver, {\n            currentStep: this.state.currentStep\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 9\n          }, this), this.state.connected ? /*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"\\uD83D\\uDFE9 connected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"\\uD83D\\uDFE5 disconnected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 71\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 3,\n          children: [/*#__PURE__*/_jsxDEV(Players, {\n            playerList: this.state.playerList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-center\",\n            children: this.state.question && /*#__PURE__*/_jsxDEV(CountdownCircleTimer, {\n              size: 120,\n              isPlaying: true,\n              duration: 5,\n              colors: [[\"#007bff\"]],\n              children: ({\n                remainingTime\n              }) => remainingTime\n            }, this.state.question.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"GetStarted\");\n$RefreshReg$(_c2, \"JoinGame\");\n$RefreshReg$(_c3, \"Waiting\");\n$RefreshReg$(_c4, \"Questions\");\n$RefreshReg$(_c5, \"Players\");\n$RefreshReg$(_c6, \"GameOver\");","map":{"version":3,"sources":["/Users/john/devops/trivia-app/front-end-react/src/App.js"],"names":["React","useState","Row","Col","Card","Button","Container","Form","ListGroup","Badge","Spinner","Jumbotron","CountdownCircleTimer","WebsocketEndpoint","TRIVIA_STEP","STEP_GETSTARTED","value","STEP_JOINGAME","STEP_WAITING","STEP_QUESTIONS","STEP_GAMEOVER","GetStarted","props","currentStep","onNewGame","JoinGame","onJoinGame","Waiting","invitelink","URL","gameId","document","baseURI","href","inviteBody","onStartGame","Questions","activeButton","setActiveButton","answerClick","key","id","option","onAnswer","questionBody","question","options","map","i","myKey","Players","playerList","filter","player","currentPlayer","color","playerName","score","connectionId","GameOver","restart","location","App","Component","constructor","ws","WebSocket","state","hash","startsWith","connected","replace","newGame","message","JSON","stringify","send","setState","joinGame","startGame","answer","questionId","componentDidMount","onopen","onmessage","evt","parse","data","action","players","splice","onclose","render","remainingTime"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Row, Col, Card, Button, Container, Form, ListGroup, Badge, Spinner, Jumbotron} from 'react-bootstrap';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\nimport { WebsocketEndpoint } from './config'\n\nvar TRIVIA_STEP = {\n  STEP_GETSTARTED : {value: 0},\n  STEP_JOINGAME: {value: 1},\n  STEP_WAITING : {value: 2},\n  STEP_QUESTIONS : {value: 3},\n  STEP_GAMEOVER : {value: 4},\n};\n\nfunction GetStarted(props) {\n  if (props.currentStep !== TRIVIA_STEP.STEP_GETSTARTED) {\n    return null\n  }\n\n  return (<Card>\n    <Card.Body>\n      <Card.Title>Get Started</Card.Title>\n      <Card.Text>\n        Click the button below to start a new game.\n      </Card.Text>\n      <Button variant=\"primary\" onClick={props.onNewGame}>Create a New Game</Button>\n    </Card.Body>\n  </Card>);\n}\n\nfunction JoinGame(props) {\n  if (props.currentStep !== TRIVIA_STEP.STEP_JOINGAME) {\n    return null\n  }\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Join Game</Card.Title>\n        <Card.Text>\n          You've been invited to join a game!\n        </Card.Text>\n        <Button variant=\"primary\" onClick={props.onJoinGame}>Join</Button>\n      </Card.Body>\n    </Card>\n  );\n}\n\nfunction Waiting(props) {\n  if (props.currentStep !== TRIVIA_STEP.STEP_WAITING) {\n    return null\n  }\n  const invitelink = new URL(`#newgame/${props.gameId}`, document.baseURI).href;\n  const inviteBody = (props.gameId) ? (\n    <Card.Text>\n      Share the link below with players joining the game\n      <Form.Control type=\"text\" value={invitelink} readOnly />\n      <Button variant=\"primary\" onClick={props.onStartGame}>Start Game</Button>\n    </Card.Text>\n    ) : (\n      <Spinner animation=\"grow\" variant=\"secondary\" />\n  );\n\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Waiting for players</Card.Title>\n        {inviteBody}\n      </Card.Body>\n    </Card>\n  );\n}\n\nfunction Questions(props) {\n  const [activeButton, setActiveButton] = useState(null);\n\n  const answerClick = (key, id, option) => {\n    props.onAnswer(id, option);\n    setActiveButton(key);\n  }\n\n  if (props.currentStep !== TRIVIA_STEP.STEP_QUESTIONS) {\n    return null\n  }\n\n  var questionBody = !props.question ? (\n    <Spinner animation=\"grow\" variant=\"secondary\" />\n  ) : (\n    <Col lg=\"8\">\n      <b>{props.question.question}</b>\n      <div className=\"d-grid gap-2\">\n      {props.question.options.map((option, i) => {\n        const myKey = props.question.id + \"-\" + i;\n        return (\n          <Button\n           key={myKey}\n           variant={activeButton===myKey ? \"success\" : \"secondary\"}\n           onClick={() => answerClick(myKey, props.question.id, option)}\n           size=\"lg\" block>\n            {option}\n          </Button>\n        )\n      })}\n      </div>\n    </Col>\n  );\n\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Let's Play!</Card.Title>\n          {questionBody}\n      </Card.Body>\n    </Card>\n  );\n}\n\nfunction Players(props) {\n  if (!props.playerList) {\n    return null;\n  }\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Players</Card.Title>\n\n        <ListGroup>\n        {props.playerList && props.playerList.filter((player)=>player.currentPlayer).map((player, i) => {\n            return (<ListGroup.Item key={player.connectionId} variant=\"primary\" className=\"d-flex justify-content-between align-items-center\">\n              <span style={{color:player.playerName}}>&#11044; <span className=\"small\" style={{color:\"Black\"}}>{player.playerName}</span></span>\n              <Badge pill variant=\"dark\">{player.score}</Badge>\n            </ListGroup.Item>)\n         })}\n         </ListGroup>\n         <p></p>\n         <ListGroup>\n        {props.playerList ? props.playerList.filter((player)=>!player.currentPlayer).map((player, i) => {\n            return (<ListGroup.Item key={player.connectionId} className=\"d-flex justify-content-between align-items-center\">\n              <span style={{color:player.playerName}}>&#11044; <span className=\"small\" style={{color:\"Black\"}}>{player.playerName}</span></span>\n              <Badge pill variant=\"dark\">{player.score}</Badge>\n            </ListGroup.Item>)\n         }) : <div>no players</div>}\n\n        </ListGroup>\n      </Card.Body>\n    </Card>\n  );\n}\n\nfunction GameOver(props) {\n  if (props.currentStep !== TRIVIA_STEP.STEP_GAMEOVER) {\n    return null\n  }\n  const restart = () => {\n    document.location = document.baseURI;\n  };\n\n  return (\n    <Jumbotron>\n    <h1>Game Completed!</h1>\n    <p>\n    </p>\n    <p>\n      <Button variant=\"primary\" onClick={()=>restart()}>Restart</Button>\n    </p>\n  </Jumbotron>\n  );\n}\n\nclass App extends React.Component {\n  ws = new WebSocket(WebsocketEndpoint);\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentStep: document.location.hash.startsWith('#newgame') ? TRIVIA_STEP.STEP_JOINGAME : TRIVIA_STEP.STEP_GETSTARTED,\n      connected: false,\n      playerList: null,\n      gameId: document.location.hash.startsWith('#newgame') ? document.location.hash.replace('#newgame/', '') :  null,\n      question: null\n    };\n  }\n\n  newGame() {\n    var message = JSON.stringify({\"action\":\"newgame\"});\n    this.ws.send(message);\n    this.setState({currentStep: TRIVIA_STEP.STEP_WAITING});\n  }\n\n  joinGame() {\n    var message = JSON.stringify({\"action\":\"joingame\", \"gameid\": this.state.gameId});\n    this.ws.send(message);\n    this.setState({currentStep: TRIVIA_STEP.STEP_QUESTIONS});\n  }\n\n  startGame() {\n    var message = JSON.stringify({\"action\":\"startgame\", \"gameid\": this.state.gameId});\n    this.ws.send(message);\n    this.setState({currentStep: TRIVIA_STEP.STEP_QUESTIONS});\n  }\n\n  answer(questionId, answer) {\n    var message = JSON.stringify({\n      \"action\":\"answer\",\n      \"gameid\": this.state.gameId,\n      \"questionid\": questionId,\n      \"answer\": answer\n    });\n    this.ws.send(message);\n  }\n\n  componentDidMount() {\n      this.ws.onopen = () => {\n        this.setState({connected: true});\n      }\n\n      this.ws.onmessage = evt => {\n        const message = JSON.parse(evt.data)\n\n        switch(message.action) {\n          case \"gamecreated\":\n            this.setState({gameId: message.gameId});\n            break;\n          case \"playerlist\":\n            this.setState({playerList: message.players.splice(0)});\n            break;\n          case \"question\":\n            this.setState({question: message.question})\n            break;\n          case \"gameover\":\n            this.setState({currentStep: TRIVIA_STEP.STEP_GAMEOVER});\n            break;\n          default:\n            break;\n        }\n      }\n\n      this.ws.onclose = () => {\n        this.setState({connected: false});\n      }\n\n  }\n\n\n  render() {\n    return (\n      <Container className=\"p-3\">\n      <Row>\n      <Col>\n        <GetStarted currentStep={this.state.currentStep} onNewGame={() => this.newGame()} />\n        <JoinGame currentStep={this.state.currentStep} onJoinGame={() => this.joinGame()} gameId={this.state.gameId} />\n        <Waiting currentStep={this.state.currentStep} onStartGame={() => this.startGame()} gameId={this.state.gameId} />\n        <Questions currentStep={this.state.currentStep} onAnswer={(questionId, answer) => this.answer(questionId, answer)} question={this.state.question}  />\n        <GameOver currentStep={this.state.currentStep} />\n        {this.state.connected ? <small>&#129001; connected</small> :  <small>&#128997; disconnected</small>}\n      </Col>\n      <Col xs={3}>\n        <Players playerList={this.state.playerList}/>\n        <br/>\n        <div className=\"d-flex justify-content-center\">\n        {this.state.question && <CountdownCircleTimer\n          key={this.state.question.id}\n          size={120}\n          isPlaying\n          duration={5}\n          colors={[[\"#007bff\"]]}\n        >\n          {({ remainingTime }) => remainingTime}\n        </CountdownCircleTimer>}\n        </div>\n      </Col>\n\n      </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}